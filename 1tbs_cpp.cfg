#
# 1tbs
#

indent_with_tabs		= 0		# 1=indent to level only, 2=indent with tabs
input_tab_size			= 4		# original tab size
output_tab_size			= 4		# new tab size
indent_columns			= output_tab_size
indent_label			= 2		# pos: absolute col, neg: relative column
indent_paren_close = 2
# indent_align_string		= False		# align broken strings
# indent_brace			= 0

nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
# nl_func_var_def_blk		= 1
# nl_before_case			= 1
nl_fcall_brace			= remove	# "foo() {" vs "foo()\n{"
nl_fdef_brace			= force		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE
nl_func_type_name = remove
nl_brace_while			= remove
nl_brace_else			= remove
nl_squeeze_ifdef		= TRUE

# mod_paren_on_return		= add		# "return 1;" vs "return (1);"
mod_full_brace_if		= force		# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for		= force		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do		= force		# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while		= force		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= force	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_inside_braces		= remove		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= remove		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc
sp_inside_square    = remove
sp_before_ptr_star  = force
sp_between_ptr_star = remove
sp_after_ptr_star_qualifier = force
sp_after_ptr_star = force
sp_type_func = force
sp_brace_typedef = force
sp_do_brace_open = force
sp_brace_close_while = force
sp_while_paren_open = force
sp_fparen_brace = force
sp_return_brace = force

sp_assign			= force

#sp_before_angle = remove
#sp_after_angle = remove

sp_arith			= force
sp_bool				= force
sp_compare			= ignore
sp_after_comma			= force
sp_func_def_paren		= force	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"
sp_func_proto_paren_empty = remove
sp_else_brace = force
sp_brace_else = force

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
# align_var_def_inline		= TRUE
# align_var_def_star		= TRUE
# align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap = 0
# align_number_right		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3

# cmt_star_cont			= TRUE

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE

pp_space_after = ignore
sp_defined_paren = remove
sp_macro = force
sp_macro_func = force

nl_after_brace_close = false
nl_brace_struct_var = remove
indent_ignore_asm_block = true
